<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.weiller.auth.user.dao.UserMapper">

  <resultMap id="BaseResultMap" type="com.weiller.auth.user.entity.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="state" jdbcType="VARCHAR" property="state" />
  </resultMap>

  <resultMap id="userAndRoleResutMap" type="com.weiller.auth.user.entity.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <collection property="roles"  javaType="list" ofType="java.lang.String" >
      <result column="role"/>
    </collection>
  </resultMap>
  <sql id="Base_Column_List">
    id, password, username, state
  </sql>
  <select id="findAll" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
  </select>
  <select id="getUserAndRoleByUsername" parameterType="java.lang.String" resultMap="userAndRoleResutMap">
    select u.*,r.rolename as role FROM user u
    left JOIN user_role ur on u.id = ur.user_id
    left join role r on r.id = ur.role_id
        where u.username = #{username,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="getByUsername"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where username = #{username }
  </select>
  <select id="getByUsernameAndPassword"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where username = #{username } AND  password = #{password}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.weiller.auth.user.entity.User">
    insert into user (id, password, username, 
      state)
    values (#{id,jdbcType=INTEGER}, #{password,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{state,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyProperty="id" keyColumn="id" useGeneratedKeys="true" parameterType="com.weiller.auth.user.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.weiller.auth.user.entity.User">
    update user
    <set>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.weiller.auth.user.entity.User">
    update user
    set password = #{password,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      state = #{state,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>